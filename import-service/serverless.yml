service: import-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  profile: xalpinistx

  environment:
    CATALOG_ITEMS_QUEUE_URL:
#      - ${cf:product-service-${self:provider.stage}.CatalogItemsQueueUrl}
      Fn::ImportValue: product-service-dev-catalog-items-queue-url

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 's3:ListBucket'
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.s3BucketName}
    - Effect: 'Allow'
      Action: 's3:*'
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:custom.s3BucketName}
            - "/*"
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
#        - ${cf:product-service-${self:provider.stage}.CatalogItemsQueueArn}
        Fn::ImportValue: product-service-dev-catalog-items-queue-arn

custom:
  s3BucketName: nodejs-aws-be-maximsan-upload

resources:
  Resources:
    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          'gatewayresponse.header.Access-Control-Allow-Origin': "'*'"
          'gatewayresponse.header.Access-Control-Allow-Headers': "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          'gatewayresponse.header.Access-Control-Allow-Origin': "'*'"
          'gatewayresponse.header.Access-Control-Allow-Headers': "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer:
            arn:
              Fn::ImportValue: BasicAuthorizerArn
#            arn:
#              !Join
#              - ':'
#              - - 'arn:aws:lambda'
#                - !Ref AWS::Region
#                - !Ref AWS::AccountId
#                - 'function:authorization-service-dev-basicAuthorizer'
#            arn: ${cf:authorization-service-${self:provider.stage}.BasicAuthorizerArn}
            name: basicAuthorizer
            identitySource: method.request.header.Authorization
            type: token
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${self:custom.s3BucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

